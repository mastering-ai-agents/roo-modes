<specification_templates>
  <overview>
    Complete templates for all six specification types in the Specification-First
    Development framework, designed for optimal AI consumption and context engineering.
  </overview>

  <template_usage_guidelines>
    <guideline>Use these templates as starting points, adapting content to project needs</guideline>
    <guideline>Maintain template structure for consistency across specifications</guideline>
    <guideline>Include all sections even if brief - completeness aids AI understanding</guideline>
    <guideline>Reference other specifications using clear file paths</guideline>
    <guideline>Provide concrete examples rather than abstract descriptions</guideline>
  </template_usage_guidelines>

  <project_progress_template>
    <description>Essential first file for tracking specification and implementation progress</description>
    <location>project-progress.md (project root)</location>
    <template><![CDATA[
# Project Progress Tracker

## Overview
This file tracks progress for both specification development and implementation phases. 
Tasks are organized by project phase and can be easily checked off as completed.

## How to Use
- [ ] = Not started
- [x] = Completed
- Use this format for all tasks
- Add new tasks as they are discovered

## Phase 1: System Planning & Architecture
- [ ] Create system overview specification
- [ ] Define technology stack and architecture
- [ ] Establish feature boundaries
- [ ] Plan development phases

## Phase 2: Shared Parts
- [ ] Create shared API contract specification
- [ ] Define shared data models
- [ ] Specify UI design system
- [ ] Document shared business logic
- [ ] Implement shared components

## Phase 3: Features

### [Feature Name 1]
- [ ] Create feature specifications (API, Data, UI, Logic)
- [ ] Implement feature components
- [ ] Validate against specifications
- [ ] Integration testing

### [Feature Name 2]
- [ ] Create feature specifications (API, Data, UI, Logic)
- [ ] Implement feature components
- [ ] Validate against specifications
- [ ] Integration testing

## Phase 4: Infrastructure
- [ ] Create infrastructure specification
- [ ] Set up deployment pipeline
- [ ] Configure monitoring and logging
- [ ] Security and compliance setup

## Notes
[Add project-specific notes and decisions here]
    ]]></template>
  </project_progress_template>

  <system_overview_template>
    <description>Foundational specification providing complete system context</description>
    <location>specs/system-overview.md</location>
    <template><![CDATA[
# System Overview: [Project Name]

## Vision Statement
[One paragraph describing the purpose and value of the system or application]

## General Architecture
[High-level system architecture description - use Mermaid syntax for diagrams]

```mermaid
graph TD
    A[Component A] --> B[Component B]
    B --> C[Component C]
    C --> D[(Database)]
```

### System Components
- **[Component Name]**: [Description of component and its role]
- **[Component Name]**: [Description of component and its role]

## Business Context
[General business context description that applies to all features of the system]

## Technology Stack
[Select and document technologies to be used when implementing the system]

### Frontend
- **Framework**: [e.g., React 18 with TypeScript]
- **State Management**: [e.g., Redux Toolkit]
- **Styling**: [e.g., Tailwind CSS]
- **Build Tool**: [e.g., Vite]

### Backend
- **Runtime**: [e.g., Node.js]
- **Framework**: [e.g., Express.js]
- **Database**: [e.g., PostgreSQL]
- **Caching**: [e.g., Redis]

### Infrastructure
- **Hosting**: [e.g., AWS]
- **Containers**: [e.g., Docker]
- **CI/CD**: [e.g., GitHub Actions]

## Feature Boundaries
[Define the major features and their boundaries]

- **[Feature Name]**: [Description and scope]
- **[Feature Name]**: [Description and scope]

## Integration Points
[Document external systems and APIs this system integrates with]

- **[External System]**: [Integration purpose and method]

## Quality Requirements
[Non-functional requirements that apply system-wide]

- **Performance**: [e.g., Response time < 200ms]
- **Scalability**: [e.g., Support 10,000 concurrent users]
- **Security**: [e.g., GDPR compliance required]
- **Availability**: [e.g., 99.9% uptime]

## Development Standards
[Coding standards and conventions for the project]

- **Code Style**: [e.g., ESLint + Prettier configuration]
- **Testing**: [e.g., Jest for unit tests, Cypress for E2E]
- **Documentation**: [e.g., JSDoc for code documentation]
- **Git Workflow**: [e.g., GitFlow with feature branches]

## Assumptions and Constraints
[Document key assumptions and constraints that influence the system design]

- **[Assumption/Constraint]**: [Description and impact]
    ]]></template>
  </system_overview_template>

  <api_contract_template>
    <description>Interface definitions and communication contracts</description>
    <location>specs/shared/api-contract.md or specs/features/[feature-name]/api-contract.md</location>
    <template><![CDATA[
# API Contract: [Module Name]

## Context
[Brief description of this API's role in the system and references to system overview]

## Global Standards
[Reference shared API standards if this is a feature-specific contract]
- Base URL: [e.g., https://api.example.com/v1]
- Authentication: [e.g., JWT Bearer tokens]
- Rate Limiting: [e.g., 1000 requests per hour per user]

## Interfaces

### [Interface Name]
[General information about the interface including its purpose, interface type, and how to access/use it]

#### Input/Call
- **Method**: [GET/POST/PUT/DELETE]
- **Path**: [e.g., /users/{id}]
- **Headers**: 
  - `Authorization`: Bearer {token}
  - `Content-Type`: application/json
- **Parameters**:
  - `param1`: [type] - [description]
  - `param2`: [type] (optional) - [description]
- **Request Body** (if applicable):
```json
{
  "field1": "string",
  "field2": 123,
  "field3": true
}
```

#### Output/Response
**Success Response (200)**:
```json
{
  "data": {
    "id": "string",
    "field1": "string",
    "field2": 123
  },
  "meta": {
    "timestamp": "2024-01-15T10:30:00Z",
    "requestId": "req_123456789"
  }
}
```

**Pagination Response** (for list endpoints):
```json
{
  "data": [...],
  "pagination": {
    "page": 1,
    "limit": 20,
    "total": 150,
    "hasNext": true
  },
  "meta": {
    "timestamp": "2024-01-15T10:30:00Z",
    "requestId": "req_123456789"
  }
}
```

#### Error Handling
**Error Response Format**:
```json
{
  "error": {
    "code": "ERROR_CODE",
    "message": "Human readable message",
    "details": []
  },
  "meta": {
    "timestamp": "2024-01-15T10:30:00Z",
    "requestId": "req_123456789"
  }
}
```

**Error Codes**:
- `400 Bad Request`: [When this occurs]
- `401 Unauthorized`: [When this occurs]
- `403 Forbidden`: [When this occurs]
- `404 Not Found`: [When this occurs]
- `500 Internal Server Error`: [When this occurs]

#### Other Characteristics
- **Caching**: [Caching behavior if applicable]
- **Idempotency**: [Whether operations are idempotent]
- **Rate Limiting**: [Specific rate limits for this endpoint]
- **Versioning**: [How this interface handles versioning]

## Validation Rules
[Common validation rules across interfaces]

- **Email Format**: Must be valid email address
- **Password Strength**: Minimum 8 characters, must include uppercase, lowercase, number
- **ID Format**: UUID v4 format required

## Security Considerations
[Security requirements specific to these interfaces]

- **Authentication**: [Requirements]
- **Authorization**: [Access control rules]
- **Data Sanitization**: [Input sanitization requirements]
    ]]></template>
  </api_contract_template>

  <data_model_template>
    <description>Data models, relationships, and validation rules</description>
    <location>specs/shared/data-model.md or specs/features/[feature-name]/data-model.md</location>
    <template><![CDATA[
# Data Model: [Module Name]

## Context
[Brief description of this data model's role in the system and references to system overview]

## Model Elements

### [Element Name]
[General information about the model element/entity and its purpose]

#### Structure
```typescript
interface [ElementName] {
  id: string;                    // UUID v4, primary key
  field1: string;               // Description of field1
  field2: number;               // Description of field2
  field3?: boolean;             // Optional field description
  createdAt: Date;              // ISO 8601 timestamp
  updatedAt: Date;              // ISO 8601 timestamp
}
```

#### Validation Rules
- **id**: Required, UUID v4 format, immutable after creation
- **field1**: Required, string, 1-255 characters, must be unique
- **field2**: Required, positive integer, range 1-1000
- **field3**: Optional, boolean, defaults to false
- **createdAt**: Auto-generated on creation, immutable
- **updatedAt**: Auto-updated on modification

#### Relationships
- **[RelatedModel]**: [Description of relationship]
  - Type: [One-to-One/One-to-Many/Many-to-Many]
  - Foreign Key: [field name]
  - Cascade: [Delete/Update behavior]

#### Database Considerations
- **Indexes**: 
  - Primary: `id`
  - Unique: `field1`
  - Composite: `field1, field2`
- **Constraints**:
  - `field1` must be unique
  - `field2` must be positive
- **Performance**:
  - Expected record count: [estimate]
  - Query patterns: [common queries]

#### Other Characteristics
- **Versioning**: [How this model handles versioning if applicable]
- **Soft Delete**: [Whether soft delete is used]
- **Audit Trail**: [Whether changes are tracked]
- **Caching**: [Caching strategy for this model]

## Data Flow Patterns
[How data flows through the system involving these models]

### [Pattern Name]
[Description of data flow pattern]

```mermaid
graph LR
    A[Source] --> B[Processing] --> C[Storage]
```

## Migration Considerations
[Important considerations for database migrations]

- **Breaking Changes**: [How to handle breaking changes]
- **Data Migration**: [Strategy for migrating existing data]
- **Rollback Strategy**: [How to rollback if needed]

## Privacy and Security
[Data privacy and security considerations]

- **PII Fields**: [Which fields contain personally identifiable information]
- **Encryption**: [Which fields require encryption at rest]
- **Access Control**: [Who can access this data]
- **Retention Policy**: [How long data is retained]
    ]]></template>
  </data_model_template>

  <ui_design_template>
    <description>User interface components, layouts, and interactions</description>
    <location>specs/shared/ui-design.md or specs/features/[feature-name]/ui-design.md</location>
    <template><![CDATA[
# UI/UX Design: [Module Name]

## Context
[Brief description of this UI's role in the system and references to system overview]

## Design System Reference
[Reference to shared design system if this is feature-specific]
- Colors: [Reference to color palette]
- Typography: [Reference to typography scale]
- Components: [Reference to shared component library]

## UI Components

### [Component Name]
[Specify the UI component including its purpose and usage context]

#### Visual Design
- **Layout**: [Description of component layout]
- **Styling**: [Key visual characteristics]
- **Responsive Behavior**: [How component adapts to different screen sizes]

#### Props/Configuration
```typescript
interface [ComponentName]Props {
  prop1: string;              // Description of prop1
  prop2?: number;             // Optional prop description
  onAction?: () => void;      // Event handler description
}
```

#### States
- **Default**: [Default appearance and behavior]
- **Loading**: [Loading state appearance]
- **Error**: [Error state appearance]
- **Disabled**: [Disabled state appearance]

#### Interactions
- **Click/Tap**: [What happens on click/tap]
- **Hover**: [Hover effects if applicable]
- **Focus**: [Focus behavior for accessibility]
- **Keyboard**: [Keyboard navigation support]

#### Accessibility
- **ARIA Labels**: [Required ARIA attributes]
- **Screen Reader**: [Screen reader considerations]
- **Keyboard Navigation**: [Tab order and keyboard shortcuts]
- **Color Contrast**: [Contrast requirements met]

## User Flows

### [Flow Name]
[Use Mermaid syntax to describe the user flow]

```mermaid
graph TD
    A[Start] --> B{Decision}
    B -->|Yes| C[Action 1]
    B -->|No| D[Action 2]
    C --> E[End]
    D --> E
```

#### Flow Steps
1. **[Step Name]**: [Description of what user does and system response]
2. **[Step Name]**: [Description of what user does and system response]

#### Success Criteria
- [Measurable outcome 1]
- [Measurable outcome 2]

#### Error Scenarios
- **[Error Condition]**: [How error is presented to user]
- **[Error Condition]**: [How error is presented to user]

## UX Patterns

### [Pattern Name]
[Specify the UX pattern and when to use it]

#### Implementation
- **Trigger**: [What triggers this pattern]
- **Behavior**: [How the pattern behaves]
- **Feedback**: [What feedback user receives]

#### Examples
- [Concrete example of pattern usage]

## Layout Specifications

### [Layout Name]
[Description of layout structure and purpose]

#### Grid System
- **Breakpoints**: 
  - Mobile: 320px - 768px
  - Tablet: 768px - 1024px
  - Desktop: 1024px+
- **Columns**: [Grid column configuration]
- **Gutters**: [Spacing between columns]

#### Spacing
- **Margins**: [Outer spacing rules]
- **Padding**: [Inner spacing rules]
- **Component Spacing**: [Space between components]

## Animation and Transitions
[Specifications for animations and transitions]

### [Animation Name]
- **Trigger**: [What triggers the animation]
- **Duration**: [Animation duration]
- **Easing**: [Easing function]
- **Properties**: [What properties animate]

## Performance Considerations
[UI performance requirements and optimizations]

- **Loading Time**: [Maximum acceptable loading time]
- **Image Optimization**: [Image size and format requirements]
- **Bundle Size**: [JavaScript bundle size limits]
- **Rendering**: [Rendering performance requirements]

## Browser Support
[Browser compatibility requirements]

- **Modern Browsers**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+
- **Mobile**: iOS Safari 14+, Chrome Mobile 90+
- **Fallbacks**: [Graceful degradation strategy]
    ]]></template>
  </ui_design_template>

  <business_logic_template>
    <description>Business logic describing WHAT the system does and WHY</description>
    <location>specs/shared/business-logic.md or specs/features/[feature-name]/business-logic.md</location>
    <template><![CDATA[
# Business Logic: [Module Name]

## Context
[Brief description of this business logic's role in the system and references to system overview]

## User Scenarios

### [Scenario Name]
**As a** [user type]
**I want** [capability]
**So that** [business value]

#### Success Criteria
- [Measurable outcome that indicates success]
- [Measurable outcome that indicates success]

#### Business Rules
- **When** [condition] **Then** [expected behavior]
- **When** [condition] **Then** [expected behavior]

#### Edge Cases & Exceptions
- **When** [edge case condition] **Then** [expected behavior] **Because** [business reason]
- **When** [error condition] **Then** [error handling] **Because** [business reason]

#### Acceptance Criteria
- [ ] [Testable criterion]
- [ ] [Testable criterion]

#### Technical Details
[Use code snippets or other representations to describe technical details if required for implementation]

```typescript
// Example business rule implementation
function validateBusinessRule(input: InputType): ValidationResult {
  // Business logic implementation
}
```

## Business Rules Repository

### [Rule Category]

#### [Rule Name]
- **Description**: [Clear description of the business rule]
- **Condition**: [When this rule applies]
- **Action**: [What happens when rule is triggered]
- **Exception**: [When this rule doesn't apply]
- **Priority**: [High/Medium/Low]

#### [Rule Name]
- **Description**: [Clear description of the business rule]
- **Condition**: [When this rule applies]
- **Action**: [What happens when rule is triggered]
- **Exception**: [When this rule doesn't apply]
- **Priority**: [High/Medium/Low]

## Workflow Definitions

### [Workflow Name]
[Description of business workflow]

#### Workflow Steps
1. **[Step Name]**: 
   - **Actor**: [Who performs this step]
   - **Action**: [What action is performed]
   - **Input**: [Required input]
   - **Output**: [Expected output]
   - **Business Rules**: [Rules that apply to this step]

2. **[Step Name]**:
   - **Actor**: [Who performs this step]
   - **Action**: [What action is performed]
   - **Input**: [Required input]
   - **Output**: [Expected output]
   - **Business Rules**: [Rules that apply to this step]

#### Decision Points
- **[Decision Point]**: [Criteria for decision and possible outcomes]

#### Error Handling
- **[Error Scenario]**: [How workflow handles this error]

## Data Validation Logic

### [Validation Category]

#### [Field/Entity] Validation
- **Required Fields**: [List of required fields]
- **Format Validation**: [Format requirements]
- **Business Validation**: [Business-specific validation rules]
- **Cross-Field Validation**: [Rules involving multiple fields]

#### Custom Validation Rules
```typescript
// Example validation rule
function validateCustomRule(data: DataType): ValidationResult {
  // Custom business validation logic
}
```

## Calculation Logic

### [Calculation Name]
[Description of business calculation]

#### Formula
```
[Mathematical formula or algorithm description]
```

#### Inputs
- **[Input Name]**: [Description and constraints]

#### Outputs
- **[Output Name]**: [Description and format]

#### Business Rules
- [Rules that affect the calculation]

#### Edge Cases
- **[Edge Case]**: [How calculation handles this case]

## Integration Logic

### [Integration Point]
[Description of how this module integrates with other parts of the system]

#### Data Exchange
- **Input**: [What data is received]
- **Processing**: [How data is processed]
- **Output**: [What data is sent]

#### Business Rules
- [Rules governing the integration]

#### Error Handling
- [How integration errors are handled]

## Compliance and Regulatory Requirements

### [Regulation Name]
- **Requirement**: [Specific regulatory requirement]
- **Implementation**: [How requirement is met]
- **Validation**: [How compliance is verified]

## Performance Requirements

### [Performance Metric]
- **Requirement**: [Specific performance requirement]
- **Measurement**: [How performance is measured]
- **Optimization**: [Strategies for meeting requirement]

## Security and Privacy Logic

### Data Protection
- **PII Handling**: [How personally identifiable information is handled]
- **Access Control**: [Who can access what data]
- **Audit Requirements**: [What actions must be logged]

### Security Rules
- **Authentication**: [Authentication requirements]
- **Authorization**: [Authorization logic]
- **Data Encryption**: [Encryption requirements]
    ]]></template>
  </business_logic_template>

  <infrastructure_template>
    <description>Deployment strategy, operational procedures, and infrastructure requirements</description>
    <location>specs/infrastructure.md</location>
    <template><![CDATA[
# Infrastructure: [Project Name]

## Context
[Brief description referencing system overview and deployment requirements]

## Infrastructure Overview
[Brief description of your infrastructure approach and deployment strategy]

## Deployment Strategy
[Specify your deployment or distribution strategy depending on the type of application]

### Application Type
- **Type**: [Web Application/Mobile App/Desktop App/Microservice/etc.]
- **Architecture**: [Monolith/Microservices/Serverless/etc.]
- **Deployment Model**: [Cloud/On-premise/Hybrid]

### Deployment Targets
- **Production**: [Production environment details]
- **Staging**: [Staging environment details]
- **Development**: [Development environment details]

## Environment Strategy
[Specify all environments that should be supported]

### Environment Configuration
| Environment | Purpose | URL | Database | Resources |
|-------------|---------|-----|----------|-----------|
| Development | Local development | localhost:3000 | Local DB | Minimal |
| Staging | Pre-production testing | staging.example.com | Staging DB | Production-like |
| Production | Live system | example.com | Production DB | Full scale |

### Environment Variables
```bash
# Required environment variables
NODE_ENV=production
DATABASE_URL=postgresql://...
API_KEY=...
JWT_SECRET=...
```

## Build and Deployment Process
[Use Mermaid syntax to describe all steps of the build and deployment process]

```mermaid
graph TD
    A[Code Commit] --> B[Build Trigger]
    B --> C[Run Tests]
    C --> D{Tests Pass?}
    D -->|Yes| E[Build Application]
    D -->|No| F[Notify Failure]
    E --> G[Deploy to Staging]
    G --> H[Integration Tests]
    H --> I{Tests Pass?}
    I -->|Yes| J[Deploy to Production]
    I -->|No| K[Rollback]
    J --> L[Health Check]
    L --> M[Notify Success]
```

### Build Process
1. **Source Control**: [Git workflow and branching strategy]
2. **Dependency Management**: [Package management and security scanning]
3. **Testing**: [Unit tests, integration tests, security tests]
4. **Build**: [Compilation, bundling, optimization]
5. **Packaging**: [Container creation, artifact generation]

### Deployment Process
1. **Staging Deployment**: [Automated deployment to staging]
2. **Validation**: [Automated testing in staging environment]
3. **Production Deployment**: [Blue-green/rolling/canary deployment]
4. **Health Checks**: [Post-deployment validation]
5. **Rollback**: [Automated rollback on failure]

## Infrastructure Components

### Compute Resources
- **Application Servers**: [Server specifications and scaling]
- **Database Servers**: [Database configuration and scaling]
- **Load Balancers**: [Load balancing strategy]
- **CDN**: [Content delivery network configuration]

### Storage
- **Database**: [Primary database configuration]
- **File Storage**: [File storage solution]
- **Backup Storage**: [Backup storage configuration]
- **Cache**: [Caching layer configuration]

### Networking
- **VPC Configuration**: [Virtual private cloud setup]
- **Security Groups**: [Network security rules]
- **DNS**: [Domain name system configuration]
- **SSL/TLS**: [Certificate management]

## Monitoring & Operations
[Specify monitoring and other operational requirements]

### Application Monitoring
- **Health Checks**: [Application health monitoring]
- **Performance Metrics**: [Key performance indicators]
- **Error Tracking**: [Error monitoring and alerting]
- **User Analytics**: [User behavior tracking]

### Infrastructure Monitoring
- **Server Metrics**: [CPU, memory, disk, network monitoring]
- **Database Monitoring**: [Database performance and health]
- **Network Monitoring**: [Network performance and security]
- **Cost Monitoring**: [Infrastructure cost tracking]

### Logging
- **Application Logs**: [Application logging strategy]
- **Access Logs**: [Web server and API access logs]
- **Security Logs**: [Security event logging]
- **Audit Logs**: [Compliance and audit logging]

### Alerting
- **Critical Alerts**: [System down, security breaches]
- **Warning Alerts**: [Performance degradation, capacity issues]
- **Information Alerts**: [Deployment notifications, scheduled maintenance]

## Security & Compliance
[Specify security and compliance requirements]

### Security Measures
- **Authentication**: [User authentication strategy]
- **Authorization**: [Access control implementation]
- **Data Encryption**: [Encryption at rest and in transit]
- **Network Security**: [Firewall, VPN, security groups]
- **Vulnerability Management**: [Security scanning and patching]

### Compliance Requirements
- **[Regulation Name]**: [Specific compliance requirements]
- **Data Privacy**: [GDPR, CCPA, or other privacy regulations]
- **Industry Standards**: [SOC 2, ISO 27001, or other standards]

### Security Monitoring
- **Intrusion Detection**: [Security monitoring tools]
- **Access Monitoring**: [User access tracking]
- **Vulnerability Scanning**: [Regular security assessments]

## Backups & Disaster Recovery
[Describe backup and disaster recovery strategy]

### Backup Strategy
- **Database Backups**: [Frequency, retention, testing]
- **File Backups**: [Application files and user data]
- **Configuration Backups**: [Infrastructure as code, configurations]

### Disaster Recovery
- **RTO (Recovery Time Objective)**: [Maximum acceptable downtime]
- **RPO (Recovery Point Objective)**: [Maximum acceptable data loss]
- **Recovery Procedures**: [Step-by-step recovery process]
- **Testing**: [Disaster recovery testing schedule]

### Business Continuity
- **Failover Strategy**: [Automatic failover procedures]
- **Geographic Distribution**: [Multi-region deployment]
- **Communication Plan**: [Incident communication procedures]

## Scaling Strategy
[How the infrastructure scales with demand]

### Horizontal Scaling
- **Auto Scaling**: [Automatic scaling configuration]
- **Load Distribution**: [Traffic distribution strategy]
- **Database Scaling**: [Read replicas, sharding strategy]

### Vertical Scaling
- **Resource Limits**: [Maximum resource allocation]
- **Scaling Triggers**: [When to scale up/down]
- **Performance Monitoring**: [Scaling decision metrics]

## Cost Optimization
[Strategies for managing infrastructure costs]

### Cost Management
- **Resource Optimization**: [Right-sizing resources]
- **Reserved Instances**: [Long-term cost savings]
- **Monitoring**: [Cost tracking and alerting]
- **Automation**: [Automated cost optimization]

## Technical Details
[Use code snippets or other representations to describe technical details if required]

### Infrastructure as Code
```yaml
# Example Kubernetes deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: myapp:latest
        ports:
        - containerPort: 3000
```

### Configuration Management
```bash
# Example Docker configuration
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```
    ]]></template>
  </infrastructure_template>

  <template_customization_guidelines>
    <guideline name="project_adaptation">
      <description>Adapt templates to specific project needs while maintaining structure</description>
      <practices>
        <practice>Remove sections that don't apply to your project type</practice>
        <practice>Add project-specific sections as needed</practice>
        <practice>Maintain consistent terminology across all specifications</practice>
        <practice>Reference other specifications using clear file paths</practice>
      </practices>
    </guideline>

    <guideline name="context_optimization">
      <description>Optimize templates for AI consumption and context engineering</description>
      <practices>
        <practice>Include concrete examples rather than abstract descriptions</practice>
        <practice>Provide complete context in each specification</practice>
        <practice>Use consistent formatting and structure</practice>
        <practice>Reference dependencies and integration points clearly</practice>
      </practices>
    </guideline>

    <guideline name="maintenance_considerations">
      <description>Design specifications for long-term maintenance</description>
      <practices>
        <practice>Separate stable concepts from volatile implementation details</practice>
        <practice>Use modular structure for easy updates</practice>
        <practice>Document rationale for major decisions</practice>
        <practice>Plan for specification versioning</practice>
      </practices>
    </guideline>
  </template_customization_guidelines>
</specification_templates>