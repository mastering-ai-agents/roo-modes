<specification_first_best_practices>
  <overview>
    Best practices for specification-first development and context engineering,
    ensuring high-quality, maintainable software through systematic approaches.
  </overview>

  <specification_writing_principles>
    <principle name="completeness">
      <description>Specifications must provide complete context without requiring additional explanation</description>
      <guidelines>
        <guideline>Include system context, business context, and technical context</guideline>
        <guideline>Document all assumptions and dependencies explicitly</guideline>
        <guideline>Provide sufficient detail for independent implementation</guideline>
        <guideline>Include edge cases and error scenarios</guideline>
      </guidelines>
      <example>
        <good>
          "This authentication feature integrates with our existing user management system
          (defined in /specs/shared/data-model.md) and follows JWT token patterns established
          in /specs/shared/api-contract.md. It must comply with GDPR requirements for EU users
          and support OAuth integration with Google and GitHub."
        </good>
        <bad>
          "Create user authentication with login and registration."
        </bad>
      </example>
    </principle>

    <principle name="consistency">
      <description>Maintain consistent patterns and terminology across all specifications</description>
      <guidelines>
        <guideline>Use standardized templates for each specification type</guideline>
        <guideline>Maintain consistent naming conventions throughout</guideline>
        <guideline>Reference shared specifications to avoid duplication</guideline>
        <guideline>Use the same terminology for similar concepts</guideline>
      </guidelines>
    </principle>

    <principle name="traceability">
      <description>Ensure clear relationships between specifications and implementations</description>
      <guidelines>
        <guideline>Use clear file naming and directory structures</guideline>
        <guideline>Include references between related specifications</guideline>
        <guideline>Document specification version and update history</guideline>
        <guideline>Link specifications to corresponding implementation files</guideline>
      </guidelines>
    </principle>

    <principle name="maintainability">
      <description>Write specifications that can evolve with the system</description>
      <guidelines>
        <guideline>Structure specifications for easy updates and extensions</guideline>
        <guideline>Separate stable concepts from volatile requirements</guideline>
        <guideline>Use inheritance patterns to reduce duplication</guideline>
        <guideline>Document rationale for major design decisions</guideline>
      </guidelines>
    </principle>
  </specification_writing_principles>

  <context_engineering_best_practices>
    <practice name="specification_driven_communication">
      <description>Use specifications as the primary communication medium with AI</description>
      <implementation>
        <step>Always reference relevant specification files in AI requests</step>
        <step>Minimize explanation by maximizing specification references</step>
        <step>Use structured request templates for consistency</step>
        <step>Require AI to document assumptions and specification usage</step>
      </implementation>
      <communication_template>
        <![CDATA[
# Implementation Request

## Context References
- System: /specs/system-overview.md
- Feature: /specs/features/[feature-name]/
- Shared patterns: /specs/shared/[relevant-specs]

## Specific Request
[Precise request based on specifications]

## Quality Requirements
Follow all standards defined in referenced specifications.
Document any assumptions made during implementation.
        ]]>
      </communication_template>
    </practice>

    <practice name="context_layering">
      <description>Organize context in hierarchical layers for optimal AI consumption</description>
      <layers>
        <layer name="system_foundation" priority="1">
          <description>Core system understanding and global patterns</description>
          <files>
            <file>/specs/system-overview.md</file>
            <file>/specs/shared/*.md</file>
          </files>
        </layer>
        <layer name="feature_context" priority="2">
          <description>Feature-specific requirements and constraints</description>
          <files>
            <file>/specs/features/[feature-name]/*.md</file>
          </files>
        </layer>
        <layer name="implementation_context" priority="3">
          <description>Existing code patterns and technical constraints</description>
          <files>
            <file>Existing implementation examples</file>
            <file>Code style and quality requirements</file>
          </files>
        </layer>
      </layers>
    </practice>

    <practice name="assumption_documentation">
      <description>Require explicit documentation of AI assumptions and decisions</description>
      <ai_response_template>
        <![CDATA[
## Implementation
[Generated code or solution]

## Assumptions Made
- [Assumption 1]: [Rationale and alternatives considered]
- [Assumption 2]: [Rationale and alternatives considered]

## Specification References Used
- [Spec 1]: [How it influenced the implementation]
- [Spec 2]: [How it influenced the implementation]

## Validation Checklist
- [ ] Follows API standards from /specs/shared/api-contract.md
- [ ] Implements business logic from feature specifications
- [ ] Matches UI requirements from UI specifications
- [ ] Includes proper error handling and validation
        ]]>
      </ai_response_template>
    </practice>

    <practice name="iterative_refinement">
      <description>Use systematic refinement when AI outputs don't meet standards</description>
      <refinement_process>
        <step number="1">Identify specific issues with reference to specifications</step>
        <step number="2">Request targeted refinement with clear criteria</step>
        <step number="3">Validate refinement against original specifications</step>
        <step number="4">Update specifications if requirements have changed</step>
      </refinement_process>
      <refinement_template>
        <![CDATA[
# Refinement Request

## Issue Identification
The generated implementation has the following issues:
- [Issue 1]: [Specific problem and specification reference]
- [Issue 2]: [Specific problem and specification reference]

## Refinement Request
Please refine the implementation to address these issues while
maintaining compliance with all referenced specifications.

## Validation Criteria
The refined implementation must:
- [Criterion 1]: [Based on specifications]
- [Criterion 2]: [Based on specifications]
        ]]>
      </refinement_template>
    </practice>
  </context_engineering_best_practices>

  <quality_assurance_guidelines>
    <guideline name="specification_compliance_validation">
      <description>Systematic validation of implementations against specifications</description>
      <validation_categories>
        <category name="completeness">
          <checks>
            <check>All specified requirements are implemented</check>
            <check>No missing functionality from specifications</check>
            <check>All edge cases are handled as specified</check>
            <check>Error handling matches specification requirements</check>
          </checks>
        </category>
        <category name="consistency">
          <checks>
            <check>Implementation follows established patterns</check>
            <check>Naming conventions match specifications</check>
            <check>API contracts are implemented correctly</check>
            <check>Data models match specification definitions</check>
          </checks>
        </category>
        <category name="integration">
          <checks>
            <check>Components integrate as specified</check>
            <check>Dependencies are handled correctly</check>
            <check>Shared components are used appropriately</check>
            <check>System boundaries are respected</check>
          </checks>
        </category>
      </validation_categories>
    </guideline>

    <guideline name="specification_maintenance">
      <description>Keep specifications current and accurate</description>
      <maintenance_practices>
        <practice>Update specifications before implementing changes</practice>
        <practice>Review specifications regularly for accuracy</practice>
        <practice>Version specifications with implementation releases</practice>
        <practice>Document specification evolution and rationale</practice>
      </maintenance_practices>
    </guideline>

    <guideline name="team_collaboration">
      <description>Use specifications to enable effective team collaboration</description>
      <collaboration_patterns>
        <pattern name="specification_reviews">
          <description>Review specifications before implementation begins</description>
          <process>
            <step>Stakeholder review of business requirements</step>
            <step>Technical review of implementation feasibility</step>
            <step>Cross-team review of integration points</step>
            <step>Final approval before development starts</step>
          </process>
        </pattern>
        <pattern name="implementation_handoffs">
          <description>Use specifications for clear work handoffs</description>
          <requirements>
            <requirement>Specifications must be complete and unambiguous</requirement>
            <requirement>Implementation team must validate understanding</requirement>
            <requirement>Regular check-ins to ensure alignment</requirement>
            <requirement>Specification updates communicated immediately</requirement>
          </requirements>
        </pattern>
      </collaboration_patterns>
    </guideline>
  </quality_assurance_guidelines>

  <common_pitfalls_and_solutions>
    <pitfall name="under_specification">
      <description>Specifications lack sufficient detail for independent implementation</description>
      <symptoms>
        <symptom>Frequent clarification requests during implementation</symptom>
        <symptom>Inconsistent implementations across team members</symptom>
        <symptom>AI generates code that doesn't meet requirements</symptom>
      </symptoms>
      <solutions>
        <solution>Include complete context (system, business, technical)</solution>
        <solution>Document all assumptions and dependencies</solution>
        <solution>Provide examples and edge cases</solution>
        <solution>Test specifications with independent reviewers</solution>
      </solutions>
    </pitfall>

    <pitfall name="specification_drift">
      <description>Implementations deviate from specifications over time</description>
      <symptoms>
        <symptom>Code no longer matches specification requirements</symptom>
        <symptom>Specifications become outdated and ignored</symptom>
        <symptom>Team confusion about current system behavior</symptom>
      </symptoms>
      <solutions>
        <solution>Update specifications before making code changes</solution>
        <solution>Implement automated specification compliance checking</solution>
        <solution>Regular specification review and update cycles</solution>
        <solution>Make specification updates part of development workflow</solution>
      </solutions>
    </pitfall>

    <pitfall name="over_specification">
      <description>Specifications become too detailed and hard to maintain</description>
      <symptoms>
        <symptom>Specifications are difficult to read and understand</symptom>
        <symptom>Minor changes require extensive specification updates</symptom>
        <symptom>Team avoids updating specifications due to complexity</symptom>
      </symptoms>
      <solutions>
        <solution>Focus on essential requirements and constraints</solution>
        <solution>Use layered specifications with appropriate abstraction levels</solution>
        <solution>Separate stable concepts from volatile implementation details</solution>
        <solution>Regular specification refactoring and simplification</solution>
      </solutions>
    </pitfall>

    <pitfall name="context_overload">
      <description>Providing too much context confuses rather than helps AI</description>
      <symptoms>
        <symptom>AI responses become unfocused or irrelevant</symptom>
        <symptom>Implementation includes unnecessary complexity</symptom>
        <symptom>AI struggles to identify key requirements</symptom>
      </symptoms>
      <solutions>
        <solution>Use targeted context references for specific tasks</solution>
        <solution>Structure context hierarchically with clear priorities</solution>
        <solution>Separate current task context from background information</solution>
        <solution>Test context effectiveness with sample AI interactions</solution>
      </solutions>
    </pitfall>

    <pitfall name="inconsistent_patterns">
      <description>Different parts of the system use different specification patterns</description>
      <symptoms>
        <symptom>Specifications are hard to navigate and understand</symptom>
        <symptom>Team members interpret requirements differently</symptom>
        <symptom>AI generates inconsistent implementations</symptom>
      </symptoms>
      <solutions>
        <solution>Establish and enforce specification templates</solution>
        <solution>Create shared specification style guide</solution>
        <solution>Regular specification pattern reviews</solution>
        <solution>Training team members on specification standards</solution>
      </solutions>
    </pitfall>
  </common_pitfalls_and_solutions>

  <success_metrics>
    <metric name="specification_completeness">
      <description>Percentage of requirements that can be implemented without clarification</description>
      <target>95% or higher</target>
      <measurement>Track clarification requests during implementation</measurement>
    </metric>

    <metric name="first_pass_success_rate">
      <description>Percentage of AI-generated code that meets requirements initially</description>
      <target>80% or higher</target>
      <measurement>Track implementations that pass specification validation</measurement>
    </metric>

    <metric name="specification_currency">
      <description>How current specifications are relative to implementation</description>
      <target>100% accuracy</target>
      <measurement>Regular audits of specification vs. implementation alignment</measurement>
    </metric>

    <metric name="team_velocity">
      <description>Development speed improvement with specification-first approach</description>
      <target>30% improvement over ad-hoc development</target>
      <measurement>Compare feature delivery times before and after adoption</measurement>
    </metric>

    <metric name="defect_reduction">
      <description>Reduction in bugs and rework due to clear specifications</description>
      <target>50% reduction in specification-related defects</target>
      <measurement>Track defects caused by unclear or missing requirements</measurement>
    </metric>
  </success_metrics>

  <continuous_improvement>
    <practice name="specification_retrospectives">
      <description>Regular reviews of specification effectiveness</description>
      <frequency>After each major feature or monthly</frequency>
      <focus_areas>
        <area>Specification clarity and completeness</area>
        <area>Context engineering effectiveness</area>
        <area>Team collaboration improvements</area>
        <area>AI interaction efficiency</area>
      </focus_areas>
    </practice>

    <practice name="pattern_evolution">
      <description>Continuously improve specification patterns and templates</description>
      <process>
        <step>Identify successful specification patterns</step>
        <step>Document and standardize effective approaches</step>
        <step>Update templates and guidelines</step>
        <step>Train team on improved patterns</step>
      </process>
    </practice>

    <practice name="tool_optimization">
      <description>Improve tools and processes for specification-first development</description>
      <areas>
        <area>Specification validation automation</area>
        <area>Context engineering tool development</area>
        <area>Team collaboration platform optimization</area>
        <area>AI interaction pattern refinement</area>
      </areas>
    </practice>
  </continuous_improvement>
</specification_first_best_practices>